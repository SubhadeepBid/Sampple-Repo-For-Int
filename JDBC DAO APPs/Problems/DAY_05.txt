Multitasking and multithreading:
1. what nesseciate the multitasking 
advantage of multitasking:

types of multitasking:
1 process based : diff application which are part of diff memory domain run simulteniously
2 thread based : (In a single application which is a part of single memory domain , 
its multiple functionality run simulteniously)

Scheduling: a specific time slot alloted to each functionality by the Scheduler

OS scheduler
Thread Scheduler

Thread: a seperate flow of execution, which executes some statements.

--In Java application, there is a default thread called Main thread which executes the statements present inside the main method.

--If we start another flow of execution parellaly with the main thread, then we can say that it is multithreaded application.

--to start a new thread in Java we have 2 steps:

1. define a functionality for a new thread inside the run method of Runnable interface.

2. start that functionality by using start() method of the Thread class.

We have 2 choice to start a new Thread.

1. by extending the Thread class and override run() method.
2. by implementing the Runnable interface and override run() method.

--Internally Thread class implements the Runnable interface and override run method with empty implementation.

example 1:

class Demo extends Thread{

@Override 
public void run(){
---
}

public static void main(String[] args){
//1 thread
Demo d1 = new Demo();
d1.run(); // it will become a normal method call

d1.start(); // 2 threads

}
}


example 2: 

class Demo implements Runnable{

@Override 
public void run(){
---
}

public static void main(String[] args){

Demo d1= new Demo();
d1.run(); // normal method call

Thread tr1 = new Thread(d1);
tr1.start()

}

}


Thread Life cycle:
Getting and setting Thread names.

Thread.currentTread().getName();


Example: 

Dhoni thread : 0 -10
Kohli Thread : 50-60 


Example using LE:
================

ThreadA.java:
----------------

package com.masai;

public class ThreadA implements Runnable{

	
	
	
	@Override
	public void run() {
	
		for(int i=0;i<=10;i++) {
			
			System.out.println(Thread.currentThread().getName()+" printing "+i);
			
		}
		
		
	}

}



ThreadB.java:
----------------

package com.masai;

public class ThreadB implements Runnable{

	@Override
	public void run() {
	
		for(int i=50;i<=60;i++) {
			
			System.out.println(Thread.currentThread().getName()+" printing "+i);
			
		}
		
		
	}

}




Demo.java:
---------------

package com.masai;

public class Demo {

	public static void main(String[] args) {
		
//		ThreadA ta= new ThreadA();
//		
//		ThreadB tb = new ThreadB();
//		
//		Thread tr1 = new Thread(ta);
//		Thread tr2 = new Thread(tb);
//		
//		tr1.setName("Dhoni");
//		tr2.setName("Kohli");
//		
//		tr1.start();
//		tr2.start(); // 3 threads 
		
		
		
		Thread tr1= new Thread( () ->{
			
			for(int i=0;i<=10;i++) {
				
				System.out.println(Thread.currentThread().getName()+" printing "+i);
				
			}

		});
		
		Thread tr2= new Thread( () ->{
			
			for(int i=50;i<=60;i++) {
				
				System.out.println(Thread.currentThread().getName()+" printing "+i);
				
			}

		});
		
		
		tr1.setName("Dhoni");
		tr2.setName("Kohli");
		
		tr1.start();
		tr2.start(); // 3 threads 
				
	}

}









Example using MR:
===============

A.java:
-----------
package com.masai;

public class A {
	
	public static void print0To10() {
		
	for(int i=0;i<=10;i++) {
			
			System.out.println(Thread.currentThread().getName()+" printing "+i);
			
		}
	}
	
	
	public static void print50To60() {
		
		for(int i=50;i<=60;i++) {
				
				System.out.println(Thread.currentThread().getName()+" printing "+i);
				
			}
		}
		
	

}


Demo.java:
--------------

package com.masai;

public class Demo {

	public static void main(String[] args) {
			
		Thread tr1 = new Thread(A::print0To10);
		Thread tr2 = new Thread(A::print50To60);
		
		tr1.setName("Dhoni");
		tr2.setName("Kohli");
		
		tr1.start();
		tr2.start(); // 3 threads 
		
			
		
	}

}


Sharing the same resource to the multiple Threads:
=======================================

--we can pass single resource to the multiple threads, and all the threads will excute the functionality of shared resource in their own call stack, in a separate flow of execution.


ex:

Demo.java:
--------------

package com.masai;

public class Demo {

	public static void main(String[] args) {
			
		ThreadA ta = new ThreadA();
		//ThreadB tb = new ThreadB();
		
		
		Thread tr1 = new Thread(ta);
		Thread tr2 = new Thread(ta);
		
		tr1.setName("Dhoni");
		tr2.setName("Kohli");
		
		tr1.start();
		tr2.start(); // 3 threads 
		
					
	}

}


Example of sleep method: inside run() method
---------------------------------

ThreadA.java:
-----------------

package com.masai;

public class ThreadA implements Runnable{

	
	
	
	@Override
	public void run() {
	
		for(int i=0;i<=10;i++) {
			
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			System.out.println(Thread.currentThread().getName()+" printing "+i);
		
		}
		
		
	}

}



Demo.java:
-------------

package com.masai;

public class Demo {

	public static void main(String[] args) {
			
		ThreadA ta = new ThreadA();
		
		Thread tr1 = new Thread(ta);
		
		tr1.setName("Dhoni");
	
		tr1.start(); // 
		
		for(int i=80;i< 90;i++) {
			System.out.println(Thread.currentThread().getName()+" Printing :"+i);
		}
		
		
		
		
		
		
	}

}


example2:  using sleep method inside main method:
----------------------------------------------------------------

--here we can use throws with the main method, but not recomended to use.

Demo.java:
----------------

package com.masai;

public class Demo {

	public static void main(String[] args) {
			
		ThreadA ta = new ThreadA();
		
		Thread tr1 = new Thread(ta);
		
		tr1.setName("Dhoni");
	
		tr1.start(); // 2 
		
		for(int i=80;i< 90;i++) {
			
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			System.out.println(Thread.currentThread().getName()+" Printing :"+i);
		}		
		
	}

}







Note: we can all a sleep() method whenever we want, we can call it in any method even inside the main method of inside a constructor also.

--we can call the sleep() method on the Thread class object also,

ex:

tr1.sleep(1000);

--here tr1 thread will not going to sleep, instead that thread which call the sleep method, that will be slept.



example of Join method:
=====================

ThreadA.java:
----------------

package com.masai;

public class ThreadA extends Thread{

	
	
	
	@Override
	public void run() {
	
		for(int i=0;i<=10;i++) {
			
			System.out.println(Thread.currentThread().getName()+" printing "+i);
		
		}
		
		
	}

}


ThreadB.java:
------------------

package com.masai;

public class ThreadB extends Thread{

	Thread tr;
	
	public ThreadB(Thread tr) {
		this.tr= tr;
	}
	
	
	@Override
	public void run() {
	
		try {
			tr.join();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		for(int i=50;i<=60;i++) {

			System.out.println(Thread.currentThread().getName()+" printing "+i);
			
		}
		
		
	}

}


Demo.java:
----------------

package com.masai;

public class Demo {

	public static void main(String[] args) {
			
		ThreadA ta = new ThreadA();
		
		ThreadB tb = new ThreadB(ta);
		
		ta.setName("Dhoni");
		tb.setName("Kohli");
			
		ta.start();
		tb.start();
	
	}
		
}




Note: all the threads which is started in this application is 
 by default joined as a last statement of the main method.
it makes sure that once all the thread gets completed then only
control comes out from the main thread.
		

Thread-safety example:

A.java:
---------
package com.masai;

public class A implements Runnable{

	public synchronized void funA() {   // If we don't use synchronozed keyword here 
				     // then we will no get the exprected output
		System.out.println("Welcome..");
		
		
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		System.out.println("Admin");
		
		
	}
	
	
	
	
	
	@Override
	public void run() {
		funA();
	
	}	
}


Demo.java:
--------------

package com.masai;

public class Demo {

	public static void main(String[] args) {
		
		A a1= new A();
		
		Thread tr1 = new Thread(a1);
		Thread tr2 = new Thread(a1);
		
		tr1.start();
		tr2.start();
		
		
		
	}
		
}
	

























