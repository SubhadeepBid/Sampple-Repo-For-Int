Love of Samosa

    import java.util.*;

    public class Main {
        public static int loveForSamosa(int n, int[] arr, int rupees) {
            Arrays.sort(arr);
            int i = 0;
            for(i = 0; i < n; i++) {
                rupees -= arr[i];
                if(rupees < 0) 
                    break;
            }
            return i;
        }
        
        public static void main(String[] args) {
            Scanner sc = new Scanner(System.in);
            int n = sc.nextInt();
            int rupees = sc.nextInt();
            int[] arr = new int[n];
            int i = -1;
            while(++i < n) {
                arr[i] = sc.nextInt();
            }
            System.out.println(loveForSamosa(n, arr, rupees));
        }
    }










    import java.util.*;

public class Main {
    public static String doOrDie(int n, int[] arr) {
        int time = 0, i = -1;
        Arrays.sort(arr);
        while(++i < n) {
            ++time;
            if(arr[i] <= time) {
                return "MayDay!";
            }
            ++time;
        }
        return "Oorah!";
    }
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int tc = sc.nextInt();
        while(tc-- > 0) {
            int n = sc.nextInt();
            int[] arr = new int[n];
            int i = -1;
            while(++i < n) {
                arr[i] = sc.nextInt();
            }
            System.out.println(doOrDie(n, arr));
        }
    }
}





import java.io.*;
import java.util.*;

public class Main {
	static class FastReader {
		BufferedReader br;
		StringTokenizer st;

		public FastReader() {
			br = new BufferedReader(new InputStreamReader(System.in));
		}

		String next() {
			while (st == null || !st.hasMoreElements()) {
				try {
					st = new StringTokenizer(br.readLine());
				}
				catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() { return Integer.parseInt(next()); }

		long nextLong() { return Long.parseLong(next()); }

		double nextDouble() { return Double.parseDouble(next()); }

		String nextLine() {
			String str = "";
			try {
				if(st.hasMoreTokens()){
					str = st.nextToken("\n");
				}
				else{
					str = br.readLine();
				}
			}
			catch (IOException e) {
				e.printStackTrace();
			}
			return str;
		}
	}
	
	public static void minTime(int n, int[] A, int[] B) {
	    Arrays.sort(A);
	    Arrays.sort(B);
	    int maxVal = 0;
	    for(int i = 0; i < n; i++) {
	        int temp = Math.abs(A[i] - B[i]);
	        maxVal = Math.max(temp, maxVal);
	    }
	    System.out.println(maxVal);
	}

	public static void main(String[] args) {
		FastReader sc = new FastReader();
		int n = sc.nextInt();
		int[] A = new int[n];
		int[] B = new int[n];
		int i = -1;
		while(++i < n) {
		    A[i] = sc.nextInt();
		}
		i = -1;
		while(++i < n) {
		    B[i] = sc.nextInt();
		}
		minTime(n, A, B);
	}
}





import java.util.*;

public class Main {
    public static String partyOrNot(int N, int C, int R, int[] arr) {
        Arrays.sort(arr);
        int sum = 0;
        for(int i = 0; i < C; i++) {
            sum += arr[i];
        }
        return (sum <= R) ? "Party" : "Sad";
    }
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int C = sc.nextInt();
        int R = sc.nextInt();
        int[] arr = new int[N];
        int i = -1;
        while(++i < N) {
            arr[i] = sc.nextInt();
        }
        System.out.println(partyOrNot(N, C, R, arr));
    }
}







import java.util.*;

public class Main {
    public static void challenge1E(int n, long[] A, int m, long[] B) {
        Arrays.sort(B);
        long el = B[m-1] + 1;
        long amount = 0;
        for(int i = 0; i < n; i++) {
            if(A[i] < el) {
                amount += (el - A[i]);
            }
        }
        System.out.println(amount);
    }
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in); 

        int n = sc.nextInt();
        long[] A = new long[n];

        int i = -1;
        while(++i < n) {
            A[i] = sc.nextLong();
        }


        int m = sc.nextInt();
        long[] B = new long[m];

        i = -1;
        while(++i < m) {
            B[i] = sc.nextLong();
        }
        challenge1E(n, A, m, B);
    }
}











import java.util.*;

public class Main {
    public static void manageStackOfBricks(int N, int X, int Y, int[] initialStack, int[] finalStack) {
        Arrays.sort(initialStack);
        Arrays.sort(finalStack);
        int effort = 0;
        for(int i = 0; i < N; i++) {
            if(initialStack[i] > finalStack[i]) {
                effort += ( ( initialStack[i] - finalStack[i] ) * Y );
            }
            else {
                effort += ( ( finalStack[i] - initialStack[i] ) * X );
            }
        }
        System.out.println(effort);
    }
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int tc = sc.nextInt();
        while(tc-- > 0) {
            int N = sc.nextInt();
            int X = sc.nextInt();
            int Y = sc.nextInt();
            int i = -1;
            int[] initialStack = new int[N];
            int[] finalStack = new int[N];
            while(++i < N) {
                initialStack[i] = sc.nextInt();
                finalStack[i] = sc.nextInt();
            }
            manageStackOfBricks(N, X, Y, initialStack, finalStack);
        }
    }
}










import java.util.*;

public class Main {
    public static String cureADisease(int n, int[] str, int[] cnt) {
        Arrays.sort(str);
        Arrays.sort(cnt);
        int i = -1;
        while(++i < n) {
            if(str[i] < cnt[i]) {
                return "No";
            }
        }
        return "Yes";
    }
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] str = new int[n];
        int[] cnt = new int[n];
        int i = -1;
        while(++i < n) {
            str[i] = sc.nextInt();
        }
        i = -1;
        while(++i < n) {
            cnt[i] = sc.nextInt();
        }
        System.out.println(cureADisease(n, str, cnt));
    }
}













function takeInput(input){
    input = input.trim().split("\n");
    let n = +input[0].trim();
    let arr = input[1].trim().split(" ").map(Number);
    arr.sort((a, b) => a-b);
    angryPeople(n, arr);
}

function angryPeople(n, arr) {
    let sol = [];
    for(let i = 0; i < n; i++) {
        if(i % 2 === 0) {
            sol.unshift(arr[i]);
        }
        else {
            sol.push(arr[i]);
        }
    }
    let max = -Infinity;
    for(let i = 0; i < n; i++) {
        let val = Math.abs( sol[i] - sol[(i+1) % n] );
        if(val > max) {
            max = val;
        }
    }
    console.log(max);
}

process.stdin.resume();
process.stdin.setEncoding("ascii");
let read="";
process.stdin.on("data", function(input){
    read+=input;
});
process.stdin.on("end", function(){
    read=read.replace(/\n$/,"");
    read=read.replace(/\n$/,"");
    takeInput(read)
});










import java.io.*;
import java.util.*;

public class Main {
	static class FastReader {
		BufferedReader br;
		StringTokenizer st;

		public FastReader() {
			br = new BufferedReader(new InputStreamReader(System.in));
		}

		String next() {
			while (st == null || !st.hasMoreElements()) {
				try {
					st = new StringTokenizer(br.readLine());
				}
				catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() { return Integer.parseInt(next()); }

		long nextLong() { return Long.parseLong(next()); }

		double nextDouble() { return Double.parseDouble(next()); }

		String nextLine() {
			String str = "";
			try {
				if(st.hasMoreTokens()){
					str = st.nextToken("\n");
				}
				else{
					str = br.readLine();
				}
			}
			catch (IOException e) {
				e.printStackTrace();
			}
			return str;
		}
	}
	
	public static void maxApples(int n, int[] arr, int W) {
	    Arrays.sort(arr);
	    int i = 0;
	    for(i = 0; i < n; i++) {
	        W -= arr[i];
	        if(W < 0) {
	            break;
	        }
	    }
	    System.out.println(i);
	}

	public static void main(String[] args) {
		FastReader sc = new FastReader();
		int n = sc.nextInt(), W = sc.nextInt();
		int[] arr = new int[n];
		int i = -1;
		while(++i < n) {
		    arr[i] = sc.nextInt();
		}
		maxApples(n, arr, W);
	}
}

















import java.util.*;

public class Main {
    public static void leastAmt(int n, int[] arr) {
        int[] den = {2000, 500, 200, 100, 50, 20, 10, 5, 2, 1};
        
        int min = 10001, not = 100;
        for(int i = 0; i < n; i++) {
            int j = -1;
            int el = arr[i];
            int notes = 0;
            while(++j < den.length && el > 0) {
                if(el >= den[j]) {
                    notes += el/den[j];
                    el = el % den[j];
                }
            }
            if(notes == not && arr[i] < min) {
                min = arr[i];
            }
            else if(notes < not) {
                not = notes;
                min = arr[i];
            }
        }
        System.out.println(min);
    }
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int tc = sc.nextInt();
        while(tc-- > 0) {
            int n = sc.nextInt();
            int i = -1;
            int[] arr = new int[n];
            while(++i < n) {
                arr[i] = sc.nextInt();
            }
            leastAmt(n, arr);
        }
    }
}










import java.util.*;

public class Main {
    public static void maximumStr(int n, int[] S, int[] C) {
        Arrays.sort(S);
        Arrays.sort(C);
        long sum = 0; 
        int i = -1;
        while(++i < n) {
            sum += (long)( S[i] * C[i] );
        }
        System.out.println(sum);
    }
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] S = new int[n];
        int[] C = new int[n];
        int i = -1;
        while(++i < n) {
            S[i] = sc.nextInt();
        }
        i = -1;
        while(++i < n) {
            C[i] = sc.nextInt();
        }
        maximumStr(n, S, C);
    }
}
